{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ReadInCSV",
						"type": "DatasetReference"
					},
					"name": "SourceFileInCSV"
				},
				{
					"dataset": {
						"referenceName": "COLOR_TOOLDB",
						"type": "DatasetReference"
					},
					"name": "SourceCOLORTOOLDB"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "RemoveDublicate"
				},
				{
					"name": "union1"
				},
				{
					"name": "exists1"
				},
				{
					"name": "TestConditionExist"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Color_Tool as string,",
				"          Color_Chip_Name as string,",
				"          DateTime as string,",
				"          Color_Chip_Source as string,",
				"          Scheme as string,",
				"          Instrument as string,",
				"          Geometry as string,",
				"          i400 as string,",
				"          i410 as string,",
				"          i420 as string,",
				"          i430 as string,",
				"          i440 as string,",
				"          i450 as string,",
				"          i460 as string,",
				"          i470 as string,",
				"          i480 as string,",
				"          i490 as string,",
				"          i500 as string,",
				"          i510 as string,",
				"          i520 as string,",
				"          i530 as string,",
				"          i5Color1 as string,",
				"          i550 as string,",
				"          i560 as string,",
				"          i570 as string,",
				"          i580 as string,",
				"          i590 as string,",
				"          i600 as string,",
				"          i610 as string,",
				"          i620 as string,",
				"          i630 as string,",
				"          i640 as string,",
				"          i650 as string,",
				"          i660 as string,",
				"          i670 as string,",
				"          i680 as string,",
				"          i690 as string,",
				"          i700 as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false) ~> SourceFileInCSV",
				"source(output(",
				"          COLOR_TOOL_ID as integer,",
				"          COLOR_TOOL_NAME as string,",
				"          COLOR_TOOL_TYPE_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SourceCOLORTOOLDB",
				"SourceFileInCSV select(mapColumn(",
				"          COLOR_TOOL_NAME = Color_Tool,",
				"          NAME = Color_Chip_Name,",
				"          CREATE_DATE = DateTime,",
				"          CHIP_SOURCE = Color_Chip_Source,",
				"          MEASUREMENT_SCHEME = Scheme,",
				"          Instrument,",
				"          Geometry,",
				"          i400,",
				"          i410,",
				"          i420,",
				"          i430,",
				"          i440,",
				"          i450,",
				"          i460,",
				"          i470,",
				"          i480,",
				"          i490,",
				"          i500,",
				"          i510,",
				"          i520,",
				"          i530,",
				"          i5Color1,",
				"          i550,",
				"          i560,",
				"          i570,",
				"          i580,",
				"          i590,",
				"          i600,",
				"          i610,",
				"          i620,",
				"          i630,",
				"          i640,",
				"          i650,",
				"          i660,",
				"          i670,",
				"          i680,",
				"          i690,",
				"          i700",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(COLOR_TOOL_NAME),",
				"     CHIP_SOURCE = ERROR_FUNCTION('')) ~> RemoveDublicate",
				"SourceCOLORTOOLDB, RemoveDublicate union(byName: true)~> union1",
				"union1 exists(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"SourceFileInCSV, SourceCOLORTOOLDB exists(Color_Tool == COLOR_TOOL_NAME,",
				"     negate:true,",
				"     broadcast: 'auto')~> TestConditionExist"
			]
		}
	}
}