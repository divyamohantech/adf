{
	"name": "dataflow_SPECTRAL_MEASUREMENT",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TablePANEL",
						"type": "DatasetReference"
					},
					"name": "SourcePANEL"
				},
				{
					"dataset": {
						"referenceName": "ReadInCSV",
						"type": "DatasetReference"
					},
					"name": "SourceFileInCSV",
					"description": "Import data from ReadInCSV1"
				},
				{
					"dataset": {
						"referenceName": "Table_SPECTRAL_READING",
						"type": "DatasetReference"
					},
					"name": "SourceSR"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Table_SPECTRAL_MEASUREMENT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "INFILEJOINPANEL"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "PANELJOINSR"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PANEL_ID as integer,",
				"          NAME as string,",
				"          IS_METALLIC as integer,",
				"          CREATE_USER_ID as integer,",
				"          CREATE_DATE as timestamp,",
				"          NOTES as string,",
				"          IS_PUBLIC as integer,",
				"          ENTITY_ID as integer,",
				"          IS_INACTIVE as integer,",
				"          AUDIT_SEARCH_INDEX_DATE as timestamp,",
				"          IS_FLAGGED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SourcePANEL",
				"source(output(",
				"          {Color Tool} as string,",
				"          {Color Chip Name} as string,",
				"          DateTime as string,",
				"          {Color Chip Source} as string,",
				"          Scheme as string,",
				"          Instrument as string,",
				"          Geometry as string,",
				"          {400} as double,",
				"          {410} as double,",
				"          {420} as double,",
				"          {430} as double,",
				"          {440} as double,",
				"          {450} as double,",
				"          {460} as double,",
				"          {470} as double,",
				"          {480} as double,",
				"          {490} as double,",
				"          {500} as double,",
				"          {510} as double,",
				"          {520} as double,",
				"          {530} as double,",
				"          {540} as double,",
				"          {550} as double,",
				"          {560} as double,",
				"          {570} as double,",
				"          {580} as double,",
				"          {590} as double,",
				"          {600} as double,",
				"          {610} as double,",
				"          {620} as double,",
				"          {630} as double,",
				"          {640} as double,",
				"          {650} as double,",
				"          {660} as double,",
				"          {670} as double,",
				"          {680} as double,",
				"          {690} as double,",
				"          {700} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceFileInCSV",
				"source(output(",
				"          READING_ID as integer,",
				"          PANEL_ID as integer,",
				"          READING_DATE as timestamp,",
				"          MEASUREMENT_SCHEME as string,",
				"          DEVICE_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SourceSR",
				"SourceFileInCSV, SourcePANEL join({Color Chip Name} == NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> INFILEJOINPANEL",
				"PANELJOINSR aggregate(groupBy(READING_ID,",
				"          Geometry,",
				"          {400},",
				"          {410}),",
				"     READING_ID_1 = first(READING_ID),",
				"          Geometry_1 = first(Geometry),",
				"          {400_1} = first(400)) ~> aggregate1",
				"INFILEJOINPANEL, SourceSR join(SourcePANEL@PANEL_ID == SourceSR@PANEL_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> PANELJOINSR",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MEASUREMENT_ID as integer,",
				"          READING_ID as integer,",
				"          GEOMETRY as string,",
				"          RAW_DATA as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          READING_ID,",
				"          GEOMETRY = Geometry,",
				"          RAW_DATA = {400}",
				"     )) ~> sink1"
			]
		}
	}
}